{"/home/travis/build/npmtest/node-npmtest-strava-v3/test.js":"/* istanbul instrument in package npmtest_strava_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-strava-v3/lib.npmtest_strava_v3.js":"/* istanbul instrument in package npmtest_strava_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_strava_v3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_strava_v3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-strava-v3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-strava-v3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_strava_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_strava_v3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_strava_v3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_strava_v3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_strava_v3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_strava_v3.__dirname + '/lib.npmtest_strava_v3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/index.js":"/**\r\n * Created by austin on 9/18/14.\r\n */\r\n\r\nvar fs = require('fs')\r\n\r\n    , util = require('./lib/util')\r\n    , oauth = require('./lib/oauth')\r\n    , athlete = require('./lib/athlete')\r\n    , athletes = require('./lib/athletes')\r\n    , activities = require('./lib/activities')\r\n    , clubs = require('./lib/clubs')\r\n    , gear = require('./lib/gear')\r\n    , segments = require('./lib/segments')\r\n    , segmentEfforts = require('./lib/segmentEfforts')\r\n    , streams = require('./lib/streams')\r\n    , uploads = require('./lib/uploads')\r\n    , runningRaces = require('./lib/runningRaces')\r\n    , routes = require('./lib/routes')\r\n    ;\r\n\r\nvar strava = {};\r\n\r\n//assign various api segments to strava object\r\nstrava.oauth = oauth;\r\nstrava.athlete = athlete;\r\nstrava.athletes = athletes;\r\nstrava.activities = activities;\r\nstrava.clubs = clubs;\r\nstrava.gear = gear;\r\nstrava.segments = segments;\r\nstrava.segmentEfforts = segmentEfforts;\r\nstrava.streams = streams;\r\nstrava.uploads = uploads;\r\nstrava.runningRaces = runningRaces;\r\nstrava.routes = routes;\r\n\r\n//and export\r\nmodule.exports = strava;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/util.js":"/**\r\n * Created by austin on 9/18/14.\r\n */\r\n\r\nvar request = require('request')\r\n    , querystring = require('querystring')\r\n    , fs = require('fs')\r\n    , authenticator = require('./authenticator');\r\n\r\n//request.debug = true\r\n\r\nvar util = {};\r\nutil.rateLimit = 'x-ratelimit-limit';\r\nutil.rateUsage = 'x-ratelimit-usage';\r\nutil.endpointBase = 'https://www.strava.com/api/v3/';\r\n\r\n//===== generic GET =====\r\nutil.getEndpoint = function(endpoint,args,done) {\r\n\r\n    if (!args) {\r\n        args = {};\r\n    }\r\n\r\n    var token = args.access_token || authenticator.getToken();\r\n    if(!token) return done({msg: 'you must include an access_token'});\r\n\r\n    var url = this.endpointBase + endpoint\r\n        , options = {\r\n            url: url\r\n            , json: true\r\n            , headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };\r\n\r\n    _requestHelper(options,done);\r\n};\r\n\r\n//===== generic PUT =====\r\nutil.putEndpoint = function(endpoint,args,done) {\r\n\r\n    if (!args) {\r\n        args = {};\r\n    }\r\n\r\n    var token = args.access_token || authenticator.getToken();\r\n    if(!token) return done({msg: 'you must include an access_token'});\r\n\r\n    //stringify the body object for passage\r\n    var qs = querystring.stringify(args.body);\r\n\r\n    var url = this.endpointBase + endpoint\r\n        , options = {\r\n            url: url\r\n            , method: 'PUT'\r\n            , json: true\r\n            , body: qs\r\n            , headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };\r\n\r\n    //add form data if present\r\n    if(args.form)\r\n        options.form = args.form;\r\n\r\n    _requestHelper(options,done);\r\n};\r\n\r\n//===== generic POST =====\r\nutil.postEndpoint = function(endpoint,args,done) {\r\n\r\n    if (!args) {\r\n        args = {};\r\n    }\r\n\r\n    var token = args.access_token || authenticator.getToken();\r\n    if(!token) return done({msg: 'you must include an access_token'});\r\n\r\n    //stringify the body object for passage\r\n    //var qs = querystring.stringify(args.body);\r\n\r\n    var url = this.endpointBase + endpoint\r\n        , options = {\r\n            url: url\r\n            , method: 'POST'\r\n            , json: true\r\n            , body: args.body\r\n            , headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };\r\n\r\n    //add form data if present\r\n    if(args.form)\r\n        options.form = args.form;\r\n\r\n    //add multipart data if present\r\n    if(args.multipart)\r\n        options.multipart = args.multipart;\r\n\r\n    _requestHelper(options,done);\r\n};\r\n\r\n//===== generic DELETE =====\r\nutil.deleteEndpoint = function(endpoint,args,done) {\r\n\r\n    if (!args) {\r\n        args = {};\r\n    }\r\n\r\n    var token = args.access_token || authenticator.getToken();\r\n    if(!token) return done({msg: 'you must include an access_token'});\r\n\r\n    //stringify the body object for passage\r\n    var qs = querystring.stringify(args.body);\r\n\r\n    var url = this.endpointBase + endpoint\r\n        , options = {\r\n            url: url\r\n            , method: 'DELETE'\r\n            , json: true\r\n            , body: qs\r\n            , headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };\r\n\r\n    _requestHelper(options,done);\r\n};\r\n\r\n//===== postUpload =====\r\nutil.postUpload = function(args,done) {\r\n\r\n    var token = args.access_token || authenticator.getToken();\r\n    if(!token) return done({msg: 'you must include an access_token'});\r\n\r\n    var url = this.endpointBase + 'uploads'\r\n        , options = {\r\n            url: url\r\n            , method: 'POST'\r\n            , json: true\r\n            , headers: {\r\n                Authorization: 'Bearer ' + token\r\n            }\r\n        };\r\n\r\n    var req = request.post(options, function(err, httpResponse, payload) {\r\n\r\n            done(err, payload);\r\n    });\r\n\r\n    var form = req.form();\r\n\r\n    //append the rest of the formData values\r\n    for(var key in args.formData) {\r\n        form.append(key, args.formData[key]);\r\n    }\r\n    form.append('file', fs.createReadStream(args.file));\r\n};\r\n\r\n\r\n//===== get pagination query string =====\r\nutil.getPaginationQS = function(args) {\r\n\r\n    //setup pagination query args\r\n    var page = typeof args.page !== 'undefined' ? args.page : null\r\n        , per_page = typeof args.per_page !== 'undefined' ? args.per_page : null\r\n        , qa = {}\r\n        , qs;\r\n\r\n    if(page)\r\n        qa.page = page;\r\n    if(per_page)\r\n        qa.per_page = per_page;\r\n\r\n    qs = querystring.stringify(qa);\r\n\r\n    return qs;\r\n};\r\n//===== generic get query string =====\r\nutil.getQS = function(allowedProps,args) {\r\n\r\n    var qa = {}\r\n        , qs;\r\n\r\n    for(var i = 0; i < allowedProps.length; i++) {\r\n        if(args[allowedProps[i]])\r\n            qa[allowedProps[i]] = args[allowedProps[i]];\r\n    }\r\n\r\n    qs = querystring.stringify(qa);\r\n    return qs;\r\n};\r\n\r\n\r\n//===== get request body object =====\r\nutil.getRequestBodyObj = function(allowedProps,args) {\r\n\r\n    var body = {};\r\n\r\n    for(var i = 0; i < allowedProps.length; i++) {\r\n        if(args[allowedProps[i]])\r\n            body[allowedProps[i]] = args[allowedProps[i]];\r\n    }\r\n\r\n    return body;\r\n};\r\n\r\n\r\n//===== helpers =====\r\nvar _requestHelper = function(options,done) {\r\n\r\n    request(options, function (err, response, payload) {\r\n        if (err) {\r\n            console.log('api call error');\r\n            console.log(err);\r\n        }\r\n\r\n        done(err, payload, parseRateLimits(response.headers));\r\n    });\r\n};\r\n\r\nfunction parseRateLimits(headers) {\r\n    if(!headers[util.rateLimit] || !headers[util.rateUsage]) {\r\n        return null;\r\n    }\r\n\r\n    var limit = headers[util.rateLimit].split(',')\r\n        , usage = headers[util.rateUsage].split(',')\r\n        , radix = 10;\r\n\r\n    return {\r\n        shortTermUsage: parseInt(usage[0], radix),\r\n        shortTermLimit: parseInt(limit[0], radix),\r\n        longTermUsage: parseInt(usage[1], radix),\r\n        longTermLimit: parseInt(limit[1], radix)\r\n    };\r\n}\r\n//===== helpers =====\r\n\r\nmodule.exports = util;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/authenticator.js":"var fs = require('fs');\r\n\r\nvar configPath = 'data/strava_config';\r\n\r\nvar token;\r\nvar clientId;\r\nvar clientSecret;\r\nvar redirectUri;\r\n\r\nvar readConfigFile = function() {\r\n  try {\r\n      var config = fs.readFileSync(configPath, {encoding: 'utf-8'});\r\n      config = JSON.parse(config);\r\n      if(config.access_token) token = config.access_token;\r\n      if(config.client_id) clientId = config.client_id;\r\n      if(config.client_secret) clientSecret = config.client_secret;\r\n      if(config.redirect_uri) redirectUri = config.redirect_uri;\r\n  } catch (err) {\r\n    // Config file does not exist. This may be a valid case if the config is\r\n    // either passed directly as an argument or via environment variables\r\n  }\r\n};\r\n\r\nvar readEnvironmentVars = function() {\r\n  if(typeof process.env.STRAVA_ACCESS_TOKEN !== 'undefined')\r\n      token = process.env.STRAVA_ACCESS_TOKEN;\r\n  if(typeof process.env.STRAVA_CLIENT_ID !== 'undefined')\r\n      clientId = process.env.STRAVA_CLIENT_ID;\r\n  if(typeof process.env.STRAVA_CLIENT_SECRET !== 'undefined')\r\n      clientSecret = process.env.STRAVA_CLIENT_SECRET;\r\n  if(typeof process.env.STRAVA_REDIRECT_URI !== 'undefined')\r\n      redirectUri = process.env.STRAVA_REDIRECT_URI;\r\n};\r\n\r\nvar fetchConfig = function() {\r\n  readConfigFile();\r\n  readEnvironmentVars();\r\n};\r\n\r\nmodule.exports = {\r\n    getToken: function() {\r\n        if(!token) {\r\n          fetchConfig();\r\n        }\r\n\r\n        if(token) {\r\n          return token;\r\n        } else {\r\n          return undefined;\r\n        }\r\n    },\r\n    getClientId: function() {\r\n        if(!clientId) {\r\n            fetchConfig();\r\n        }\r\n\r\n        if(clientId) {\r\n          return clientId;\r\n        } else {\r\n          console.log('No client id found');\r\n          return undefined;\r\n        }\r\n    },\r\n    getClientSecret: function() {\r\n        if(!clientSecret) {\r\n            fetchConfig();\r\n        }\r\n\r\n        if(clientSecret) {\r\n            return clientSecret;\r\n        } else {\r\n            console.log('No client secret found');\r\n            return undefined;\r\n        }\r\n    },\r\n    getRedirectUri: function() {\r\n        if(!redirectUri) {\r\n            fetchConfig();\r\n        }\r\n\r\n        if(redirectUri) {\r\n            return redirectUri;\r\n        } else {\r\n            console.log('No redirectUri found');\r\n            return undefined;\r\n        }\r\n    },\r\n    purge: function() {\r\n      token = undefined;\r\n      clientId = undefined;\r\n      clientSecret = undefined;\r\n      redirectUri = undefined;\r\n    }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/oauth.js":"/**\r\n * Created by austin on 9/22/14.\r\n */\r\n\r\nvar util = require('./util')\r\n    , authenticator = require('./authenticator')\r\n    , request = require('request')\r\n    , querystring = require('querystring');\r\n\r\nvar oauth = {};\r\n\r\noauth.getRequestAccessURL = function(args) {\r\n\r\n    var url = 'https://www.strava.com/oauth/authorize?'\r\n        , oauthArgs = {\r\n            client_id: authenticator.getClientId()\r\n            , redirect_uri: authenticator.getRedirectUri()\r\n            , response_type: 'code'\r\n        };\r\n\r\n    if(args.scope)\r\n        oauthArgs.scope = args.scope;\r\n    if(args.state)\r\n        oauthArgs.state = args.state;\r\n    if(args.approval_prompt)\r\n        oauthArgs.approval_prompt = args.approval_prompt;\r\n\r\n    var qs = querystring.stringify(oauthArgs);\r\n\r\n    url += qs;\r\n    return url;\r\n};\r\n\r\noauth.getToken = function(code,done) {\r\n\r\n    var endpoint = 'oauth/token'\r\n        , args = {}\r\n        , form = {\r\n            code: code\r\n            , client_secret: authenticator.getClientSecret()\r\n            , client_id: authenticator.getClientId()\r\n        };\r\n\r\n    args.form = form;\r\n    util.postEndpoint(endpoint,args,done);\r\n};\r\n\r\noauth.deauthorize = function(args,done) {\r\n\r\n    var endpoint = 'https://www.strava.com/oauth/deauthorize';\r\n\r\n    var url = endpoint\r\n        , options = {\r\n            url: url\r\n            , method: 'POST'\r\n            , json: true\r\n            , headers: {\r\n                Authorization: 'Bearer ' + args.access_token\r\n            }\r\n        };\r\n\r\n    request(options, function (err, response, payload) {\r\n\r\n        if (!err) {\r\n            //console.log(payload);\r\n        }\r\n        else {\r\n            console.log('api call error');\r\n            console.log(err);\r\n        }\r\n\r\n        done(err, payload);\r\n    });\r\n};\r\n\r\nmodule.exports = oauth;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/athlete.js":"/**\r\n * Created by austin on 9/18/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar athlete = {}\r\n    , _qsAllowedProps = [\r\n\r\n        //pagination\r\n        'page'\r\n        , 'per_page'\r\n\r\n        //listActivities\r\n        , 'before'\r\n        , 'after'\r\n    ]\r\n    , _updateAllowedProps = [\r\n        'city'\r\n        , 'state'\r\n        , 'country'\r\n        , 'sex'\r\n        , 'weight'\r\n    ];\r\n\r\n//===== athlete endpoint =====\r\nathlete.get = function(args,done) {\r\n\r\n    var endpoint = 'athlete';\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\nathlete.listFriends = function(args,done) {\r\n\r\n    _listHelper('friends',args,done);\r\n};\r\nathlete.listFollowers = function(args,done) {\r\n\r\n    _listHelper('followers',args,done);\r\n};\r\nathlete.listActivities = function(args,done) {\r\n\r\n    _listHelper('activities',args,done);\r\n};\r\nathlete.listClubs = function(args,done) {\r\n\r\n    _listHelper('clubs',args,done);\r\n};\r\nathlete.listRoutes = function(args,done) {\r\n\r\n    _listHelper('routes',args,done);\r\n};\r\nathlete.listZones = function(args,done) {\r\n\r\n    _listHelper('zones',args,done);\r\n};\r\n\r\nathlete.update = function(args,done) {\r\n\r\n    var endpoint = 'athlete'\r\n        , form = util.getRequestBodyObj(_updateAllowedProps,args);\r\n\r\n    args.form = form;\r\n    util.putEndpoint(endpoint,args,done);\r\n};\r\n//===== athlete endpoint =====\r\n\r\n//===== helpers =====\r\nvar _listHelper = function(listType,args,done) {\r\n\r\n    var endpoint = 'athlete/'\r\n        , qs = util.getQS(_qsAllowedProps,args);\r\n\r\n    endpoint += listType + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\nmodule.exports = athlete;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/athletes.js":"/**\r\n * Created by austin on 9/19/14.\r\n */\r\n\r\nvar util = require('./util')\r\n    ;\r\n\r\nvar athletes = {};\r\n\r\n//===== athletes endpoint =====\r\nathletes.get = function(args,done) {\r\n\r\n    _listHelper('',args,done);\r\n};\r\nathletes.listFriends = function(args,done) {\r\n\r\n    _listHelper('friends',args,done);\r\n};\r\nathletes.listFollowers = function(args,done) {\r\n\r\n    _listHelper('followers',args,done);\r\n};\r\nathletes.stats = function(args, done) {\r\n\r\n    _listHelper('stats',args,done);\r\n};\r\nathletes.listKoms = function(args,done) {\r\n\r\n    _listHelper('koms',args,done);\r\n};\r\n//===== athletes endpoint =====\r\n\r\n//===== helpers =====\r\nvar _listHelper = function(listType,args,done) {\r\n\r\n    var endpoint = 'athletes/'\r\n        , err = null\r\n        , qs = util.getPaginationQS(args);\r\n\r\n    //require athlete id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {'msg':'args must include an athlete id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/' + listType + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\nmodule.exports = athletes;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/activities.js":"/**\r\n * Created by austin on 9/20/14.\r\n */\r\n\r\nvar util = require('./util')\r\n    ;\r\n\r\nvar activities = {}\r\n    , _qsAllowedProps = [\r\n\r\n        //pagination\r\n        'page'\r\n        , 'per_page'\r\n\r\n        //getSegment\r\n        , 'include_all_efforts'\r\n    ]\r\n    , _createAllowedProps = [\r\n        'name'\r\n        , 'type'\r\n        , 'start_date_local'\r\n        , 'elapsed_time'\r\n        , 'description'\r\n        , 'distance'\r\n        , 'private'\r\n    ]\r\n    , _updateAllowedProps = [\r\n        'name'\r\n        , 'type'\r\n        , 'private'\r\n        , 'commute'\r\n        , 'trainer'\r\n        , 'description'\r\n        , 'gear_id'\r\n    ];\r\n\r\n//===== activities endpoint =====\r\nactivities.get = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null\r\n        , qs = util.getQS(_qsAllowedProps,args);\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\nactivities.create = function(args,done) {\r\n\r\n    var endpoint = 'activities';\r\n\r\n    args.body = util.getRequestBodyObj(_createAllowedProps,args);\r\n    util.postEndpoint(endpoint,args,done);\r\n};\r\nactivities.update = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , form = util.getRequestBodyObj(_updateAllowedProps,args)\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n\r\n    args.form = form;\r\n\r\n    util.putEndpoint(endpoint,args,done);\r\n};\r\nactivities.delete = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.deleteEndpoint(endpoint,args,done);\r\n};\r\nactivities.listFriends = function(args,done) {\r\n\r\n    var endpoint = 'activities/following/';\r\n    _listHelper(endpoint,args,done);\r\n};\r\nactivities.listZones = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/zones';\r\n\r\n    _listHelper(endpoint,args,done);\r\n};\r\nactivities.listLaps = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/laps';\r\n\r\n    _listHelper(endpoint,args,done);\r\n};\r\nactivities.listComments = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/comments';\r\n\r\n    _listHelper(endpoint,args,done);\r\n};\r\nactivities.listKudos = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/kudos';\r\n\r\n    _listHelper(endpoint,args,done);\r\n};\r\nactivities.listPhotos = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    //require activity id\r\n    if (typeof args.id === 'undefined') {\r\n        err = { msg: 'args must include an activity id' };\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/photos';\r\n\r\n    var pageQS = util.getPaginationQS(args);\r\n\r\n    var completeQS = pageQS;\r\n\r\n    // should be true according to Strava API docs\r\n    args.photo_sources = true;\r\n    var argsQS = util.getQS(['size', 'photo_sources'], args);\r\n\r\n    if (completeQS && completeQS.length) {\r\n        completeQS += '&';\r\n    }\r\n    completeQS += argsQS;\r\n\r\n    endpoint += '?' + completeQS;\r\n\r\n    util.getEndpoint(endpoint, args, done);\r\n};\r\nactivities.listRelated = function(args,done) {\r\n\r\n    var endpoint = 'activities/'\r\n        , err = null;\r\n\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an activity id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/related';\r\n\r\n    _listHelper(endpoint,args,done);\r\n};\r\n//===== activities endpoint =====\r\n\r\n//===== helpers =====\r\nvar _listHelper = function(endpoint,args,done) {\r\n\r\n    var qs = util.getPaginationQS(args);\r\n\r\n    endpoint +=  '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\nmodule.exports = activities;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/clubs.js":"/**\r\n * Created by austin on 9/22/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar clubs = {};\r\n\r\n//===== clubs endpoint =====\r\nclubs.get = function(args,done) {\r\n\r\n    var endpoint = 'clubs/';\r\n\r\n    //require club id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include a club id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\nclubs.listMembers = function(args,done) {\r\n\r\n    _listHelper('members',args,done);\r\n};\r\nclubs.listActivities = function(args,done) {\r\n\r\n    _listHelper('activities',args,done);\r\n};\r\nclubs.listAnnouncements = function(args,done) {\r\n\r\n    _listHelper('announcements',args,done);\r\n};\r\nclubs.listEvents = function(args,done) {\r\n\r\n    _listHelper('group_events',args,done);\r\n};\r\nclubs.listAdmins = function(args,done) {\r\n\r\n    _listHelper('admins',args,done);\r\n};\r\nclubs.joinClub = function(args,done) {\r\n\r\n    _listHelper('join',args,done);\r\n};\r\nclubs.leaveClub = function(args,done) {\r\n\r\n    _listHelper('leave',args,done);\r\n};\r\n//===== clubs endpoint =====\r\n\r\n//===== helpers =====\r\nvar _listHelper = function(listType,args,done) {\r\n\r\n    var endpoint = 'clubs/'\r\n        , err = null\r\n        , qs = util.getPaginationQS(args);\r\n\r\n    //require club id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {'msg':'args must include a club id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/' + listType + '?' + qs;\r\n\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\n\r\nmodule.exports = clubs;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/gear.js":"/**\r\n * Created by austin on 9/22/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar gear = {};\r\n\r\ngear.get = function(args,done) {\r\n\r\n    var endpoint = 'gear/';\r\n\r\n    //require gear id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include a gear id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n\r\nmodule.exports = gear;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/segments.js":"/**\r\n * Created by austin on 9/23/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar segments = {}\r\n    , _qsAllowedProps = [\r\n\r\n        //pagination\r\n        'page'\r\n        , 'per_page'\r\n\r\n        //listSegments\r\n        , 'athlete_id'\r\n        , 'gender'\r\n        , 'age_group'\r\n        , 'weight_class'\r\n        , 'following'\r\n        , 'club_id'\r\n        , 'date_range'\r\n        , 'start_date_local'\r\n        , 'end_date_local'\r\n\r\n        //explore\r\n        , 'bounds'\r\n        , 'activity_type'\r\n        , 'min_cat'\r\n        , 'max_cat'\r\n    ];\r\n\r\n//===== segments endpoint =====\r\nsegments.get = function(args,done) {\r\n\r\n    var endpoint = 'segments/'\r\n        , err = null\r\n        , qs = util.getPaginationQS(args);\r\n\r\n    //require segment id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an segment id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n\r\nsegments.listStarred = function(args,done) {\r\n\r\n    var qs = util.getQS(_qsAllowedProps,args)\r\n        , endpoint = 'segments/starred?' + qs;\r\n\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n\r\nsegments.listEfforts = function(args,done) {\r\n\r\n    _listHelper('all_efforts',args,done);\r\n};\r\n\r\nsegments.listLeaderboard = function(args,done) {\r\n\r\n    _listHelper('leaderboard',args,done);\r\n};\r\n\r\nsegments.explore = function(args,done) {\r\n\r\n    var qs = util.getQS(_qsAllowedProps,args)\r\n        , endpoint = 'segments/explore?' + qs;\r\n\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== segments endpoint =====\r\n\r\n//===== helpers =====\r\nvar _listHelper = function(listType,args,done) {\r\n\r\n    var endpoint = 'segments/'\r\n        , err = null\r\n        , qs = util.getQS(_qsAllowedProps,args);\r\n\r\n    //require segment id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include a segment id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '/' + listType + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\nmodule.exports = segments;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/segmentEfforts.js":"/**\r\n * Created by austin on 9/23/14.\r\n */\r\n\r\nvar util = require('./util')\r\n    ;\r\n\r\nvar segmentEfforts = {};\r\n\r\n//===== segment_efforts endpoint =====\r\nsegmentEfforts.get = function(args,done) {\r\n\r\n    var endpoint = 'segment_efforts/'\r\n        , err = null;\r\n\r\n    //require segment id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include a segment id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== segment_efforts endpoint =====\r\n\r\nmodule.exports = segmentEfforts;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/streams.js":"/**\r\n * Created by austin on 9/24/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar streams = {}\r\n    , _qsAllowedProps = [\r\n        'resolution'\r\n        , 'series_type'\r\n    ];\r\n\r\n//===== streams endpoint =====\r\nstreams.activity = function(args,done) {\r\n\r\n    var endpoint = 'activities';\r\n    _typeHelper(endpoint,args,done);\r\n};\r\n\r\nstreams.effort = function(args,done) {\r\n\r\n    var endpoint = 'segment_efforts';\r\n    _typeHelper(endpoint,args,done);\r\n};\r\n\r\nstreams.segment = function(args,done) {\r\n\r\n    var endpoint = 'segments';\r\n    _typeHelper(endpoint,args,done);\r\n};\r\n\r\nstreams.route = function(args,done) {\r\n\r\n    var endpoint = 'routes';\r\n    _typeHelper(endpoint,args,done);\r\n};\r\n//===== streams endpoint =====\r\n\r\n//===== helpers =====\r\nvar _typeHelper = function(endpoint,args,done) {\r\n\r\n    var err = null\r\n        , qs = util.getQS(_qsAllowedProps,args);\r\n\r\n    //require id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {'msg':'args must include an id'};\r\n        return done(err);\r\n    }\r\n    //require types\r\n    if(typeof args.types === 'undefined') {\r\n        err = {'msg':'args must include types'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += '/' + args.id + '/streams/' + args.types + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== helpers =====\r\n\r\nmodule.exports = streams;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/uploads.js":"/**\r\n * Created by austin on 9/25/14.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar uploads = {}\r\n    , _allowedFormProps = [\r\n        'activity_type'\r\n        , 'name'\r\n        , 'description'\r\n        , 'private'\r\n        , 'trainer'\r\n        , 'data_type'\r\n    ];\r\n\r\nuploads.post = function(args,done) {\r\n\r\n    var err = null\r\n        , self = this;\r\n\r\n    //various requirements\r\n    if(\r\n        typeof args.file === 'undefined' || typeof args.data_type == 'undefined'\r\n        ) {\r\n\r\n        err = {'msg':'args must include both file and data_type'};\r\n        return done(err);\r\n    }\r\n\r\n    //setup formData for request\r\n    args.formData = {};\r\n    for(var i = 0; i < _allowedFormProps.length; i++) {\r\n        if(args[_allowedFormProps[i]])\r\n            args.formData[_allowedFormProps[i]] = args[_allowedFormProps[i]];\r\n    }\r\n\r\n    util.postUpload(args,function(err,payload) {\r\n\r\n        // finish off this branch of the call and let the\r\n        // status checking bit happen after\r\n        done(err,payload);\r\n\r\n        if(!err && args.statusCallback) {\r\n\r\n            var checkArgs = {\r\n              id: payload.id,\r\n              access_token: args.access_token\r\n            };\r\n            self._check(checkArgs,args.statusCallback);\r\n        }\r\n\r\n    });\r\n};\r\n\r\nuploads._check = function(args,cb) {\r\n\r\n    var endpoint = 'uploads'\r\n        , self = this;\r\n\r\n    endpoint += '/' + args.id;\r\n    util.getEndpoint(endpoint,args,function(err,payload) {\r\n\r\n        if(!err) {\r\n            cb(err,payload);\r\n            if(!self._uploadIsDone(payload))\r\n                setTimeout(function() {\r\n\r\n                    self._check(args,cb);\r\n                }, 1000);\r\n        }\r\n        else {\r\n            cb(err);\r\n        }\r\n    });\r\n};\r\n\r\nuploads._uploadIsDone = function(args) {\r\n\r\n    var isDone = false;\r\n\r\n    switch (args.status)\r\n    {\r\n        case 'Your activity is still being processed.':\r\n            isDone = false;\r\n            break;\r\n\r\n        default:\r\n            isDone = true;\r\n    }\r\n\r\n    return isDone;\r\n};\r\n\r\nmodule.exports = uploads;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/runningRaces.js":"/**\r\n * Created by ozqu on 12/31/16.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nvar runningRaces= {}\r\n    , _qsAllowedProps = [\r\n        'year'\r\n    ];\r\n\r\n//===== running_races endpoint =====\r\nrunningRaces.get = function(args,done) {\r\n    var endpoint = 'running_races/'\r\n        , err = null;\r\n\r\n    //require running race id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an race id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n\r\nrunningRaces.listRaces = function(args,done) {\r\n    var qs = util.getQS(_qsAllowedProps,args)\r\n        , endpoint = 'running_races?' + qs;\r\n\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n\r\n//===== running_races endpoint =====\r\nmodule.exports = runningRaces;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/lib/routes.js":"/**\r\n * Created by dhritzkiv on 9/20/14.\r\n */\r\n\r\nvar util = require('./util')\r\n    ;\r\n\r\nvar routes = {}\r\n    , _qsAllowedProps = [];\r\n\r\n//===== routes endpoint =====\r\nroutes.get = function(args,done) {\r\n\r\n    var endpoint = 'routes/'\r\n        , err = null\r\n        , qs = util.getQS(_qsAllowedProps,args);\r\n\r\n    //require route id\r\n    if(typeof args.id === 'undefined') {\r\n        err = {msg:'args must include an route id'};\r\n        return done(err);\r\n    }\r\n\r\n    endpoint += args.id + '?' + qs;\r\n    util.getEndpoint(endpoint,args,done);\r\n};\r\n//===== routes endpoint =====\r\n\r\nmodule.exports = routes;\r\n","/home/travis/build/npmtest/node-npmtest-strava-v3/node_modules/strava-v3/gruntfile.js":"/**\r\n * Created by austin on 9/23/14.\r\n */\r\n\r\nmodule.exports = function(grunt) {\r\n    grunt.initConfig({\r\n\r\n        pkg: grunt.file.readJSON('package.json')\r\n        , jshint: {\r\n            all: ['gruntfile.js', 'lib/*.js'],\r\n            options: {\r\n                maxlen: 80\r\n                , quotmark: 'single'\r\n                , laxcomma: true\r\n            }\r\n        }\r\n        , simplemocha: {\r\n            options: {\r\n                globals: ['should']\r\n                , timeout: 20000\r\n                , ignoreLeaks: false\r\n                , ui: 'bdd'\r\n                , reporter: 'spec'\r\n            },\r\n            all: { src: ['test/*.js'] }\r\n        }\r\n\r\n    });\r\n\r\n    grunt.loadNpmTasks('grunt-contrib-jshint');\r\n    grunt.loadNpmTasks('grunt-simple-mocha');\r\n\r\n    grunt.registerTask('default', ['jshint', 'simplemocha']);\r\n};\r\n"}